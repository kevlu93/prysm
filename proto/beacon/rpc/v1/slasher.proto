syntax = "proto3";

package ethereum.beacon.rpc.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Slasher service API
//
// Slasher service provides an interface for checking if attestations or blocks are slashable.
service Slasher {
  // Returns any found attester slashings if the passed in attestation conflicts with a validators history.
  rpc IsSlashableAttestation(ethereum.eth.v1alpha1.IndexedAttestation) returns (AttesterSlashingResponse);

  // Returns any found proposer slashings if the passed in proposal conflicts with a validators history.
  rpc IsSlashableBlock(ethereum.eth.v1alpha1.SignedBeaconBlockHeader) returns (ProposerSlashingResponse);

  // Returns if a given indexed attestation could be slashable when compared to the slashers history for the attesters.
  // This function is read-only, and does not need the indexed attestation to be signed.
  rpc IsSlashableAttestationNoUpdate(ethereum.eth.v1alpha1.IndexedAttestation) returns (Slashable);

  // Returns if a given beacon block header could be slashable when compared to the slashers history for the proposer.
  // This function is read-only, and does not need the beacon block header to be signed.
  rpc IsSlashableBlockNoUpdate(ethereum.eth.v1alpha1.BeaconBlockHeader) returns (Slashable);

  // Returns the highest source and target attestation for validator indexes that have been observed by the slasher.
  rpc HighestAttestations(HighestAttestationRequest) returns (HighestAttestationResponse);

}

message HighestAttestationRequest {
  repeated uint64 validator_ids = 1;
}

message HighestAttestationResponse {
  repeated HighestAttestation attestations = 1;
}

message HighestAttestation {
  uint64 validator_id = 1;
  uint64 highest_source_epoch = 2 [(gogoproto.casttype) = "github.com/prysmaticlabs/eth2-types.Epoch"];
  uint64 highest_target_epoch = 3 [(gogoproto.casttype) = "github.com/prysmaticlabs/eth2-types.Epoch"];
}

message ProposerSlashingResponse {
  repeated ethereum.eth.v1alpha1.ProposerSlashing proposer_slashing = 1;
}

message Slashable {
  bool slashable = 1;
}

message AttesterSlashingResponse {
  repeated ethereum.eth.v1alpha1.AttesterSlashing attester_slashing = 1;
}
